// //----------------------------------------------------------------------------------------------------
class Rect {
    constructor(x, y, w, h) {
        this.x = x;
        this.y = y;
        this.w = w;
        this.h = h;
    }

    contains(point) {
        return (point.x >= this.x - this.w &&
            point.x <= this.x + this.w &&
            point.y >= this.y - this.h &&
            point.y < this.y + this.h);
    }

    intersects(range) {
        return !(range.x - range.w > this.x + this.w ||
            range.x + range.w < this.x - this.w ||
            range.y - range.h > this.y + this.h ||
            range.y + range.h < this.y - this.h);
    }

    draw(color = "white") {
        rectMode(CENTER);
        stroke(color);
        strokeWeight(1);
        rect(this.x, this.y, this.w, this.h);
    }

}

class Point {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }

    draw() {
        stroke("white");
        strokeWeight(5);
        point(this.x, this.y);
    }




}

class Sprite {
    constructor(sprite = 0, x, y, w, h,) {
        // this.img = img
        this.x = x
        this.y = y
        this.w = w
        this.h = h
        this.sprite = sprite
    }

    contains(point) {
        return (point.x >= this.x - this.w &&
            point.x <= this.x + this.w &&
            point.y >= this.y - this.h &&
            point.y <= this.y + this.h);
    }

    intersects(range) {
        return !(range.x - range.w >= this.x + this.w ||
            range.x + range.w <= this.x - this.w ||
            range.y - range.h >= this.y + this.h ||
            range.y + range.h <= this.y - this.h);
    }

    draw() {
        imageMode(CENTER)
        image(blocks[this.sprite], this.x, this.y, this.w, this.h)
    }
}

class AnimSprite {
    constructor(source = mario, x, y, w, h,) {
        // this.img = img
        this.x = x
        this.y = y
        this.w = w
        this.h = h
        this.source = source
        this.speed = 0.2
        this.index = 0
        this.dir = 0
    }

    contains(point) {
        return (point.x >= this.x - this.w &&
            point.x <= this.x + this.w &&
            point.y >= this.y - this.h &&
            point.y <= this.y + this.h);
    }

    intersects(range) {
        return !(range.x - range.w >= this.x + this.w ||
            range.x + range.w <= this.x - this.w ||
            range.y - range.h >= this.y + this.h ||
            range.y + range.h <= this.y - this.h);
    }

    draw(vel, acc) {
        imageMode(CENTER)
        let index = 1 + floor(this.index) % 3



        if (vel.x != 0)
            if (vel.x > 0) this.dir = 0
            else this.dir = 1


        this.speed = abs(vel.x / 6)
        // console.log(acc.x)

        if (vel.y == 0)
            if (keyIsDown(LEFT_ARROW) && vel.x > 0)
                image(this.source.get(16 * 4, 1 * 16, 16, 16), this.x, this.y, this.w, this.h)
            else if (keyIsDown(RIGHT_ARROW) && vel.x < 0)
                image(this.source.get(16 * 4, 0 * 16, 16, 16), this.x, this.y, this.w, this.h)
            else
                if (vel.x == 0)
                    image(this.source.get(0, this.dir * 16, 16, 16), this.x, this.y, this.w, this.h)
                else
                    image(this.source.get(index * 16, this.dir * 16, 16, 16), this.x, this.y, this.w, this.h)
        else
            image(this.source.get(16 * 5, this.dir * 16, 16, 16), this.x, this.y, this.w, this.h)

        this.animate();
    }

    animate() {
        this.index = this.index + this.speed
    }
}

class BackgroundSprite {
    constructor(sprite = 0, x, y, w, h,) {
        // this.img = img
        this.x = x
        this.y = y
        this.w = w
        this.h = h
        this.sprite = sprite
    }

    contains(point) {
        return false;
    }

    intersects(range) {
        return false;
    }

    draw() {
        imageMode(CENTER)
        image(blocks[this.sprite], this.x, this.y, this.w, this.h)
    }
}


function load11() {
    loadLevel("[[16,208,2],[32,208,2],[48,208,2],[64,208,2],[80,208,2],[96,208,2],[112,208,2],[128,208,2],[144,208,2],[160,208,2],[176,208,2],[192,208,2],[208,208,2],[224,208,2],[240,208,2],[256,208,2],[256,224,2],[240,224,2],[224,224,2],[208,224,2],[192,224,2],[160,224,2],[176,224,2],[144,224,2],[128,224,2],[112,224,2],[96,224,2],[64,224,2],[80,224,2],[48,224,2],[32,224,2],[16,224,2],[272,208,2],[272,224,2],[272,144,3],[256,272,3],[288,208,2],[304,208,2],[320,208,2],[320,224,2],[304,224,2],[288,224,2],[336,208,2],[352,208,2],[368,208,2],[384,208,2],[416,208,2],[400,208,2],[416,224,2],[336,144,1],[368,144,1],[400,144,1],[384,144,3],[352,144,3],[368,80,3],[336,224,2],[352,224,2],[368,224,2],[384,224,2],[400,224,2],[320,288,2],[432,208,2],[448,208,2],[464,208,2],[464,224,2],[448,224,2],[432,224,2],[480,208,2],[496,208,2],[512,208,2],[512,224,2],[528,224,2],[528,208,2],[544,208,2],[544,224,2],[560,224,2],[560,208,2],[576,208,2],[576,224,2],[592,208,2],[608,208,2],[624,208,2],[624,224,2],[608,224,2],[592,224,2],[640,208,2],[656,208,2],[672,208,2],[672,224,2],[688,208,2],[704,208,2],[704,224,2],[688,224,2],[720,208,2],[736,208,2],[752,208,2],[752,224,2],[736,224,2],[720,224,2],[784,208,2],[768,208,2],[800,224,2],[800,208,2],[816,288,2],[816,208,2],[832,208,2],[848,208,2],[864,208,2],[880,208,2],[896,208,2],[912,208,2],[928,208,2],[928,224,2],[912,224,2],[896,224,2],[880,224,2],[864,224,2],[848,224,2],[832,224,2],[816,224,2],[880,272,2],[944,208,2],[960,208,2],[976,208,2],[976,224,2],[992,208,2],[1008,208,2],[1024,208,2],[1040,208,2],[1056,208,2],[1072,208,2],[1088,208,2],[1104,208,2],[1120,208,2],[1120,224,2],[1104,224,2],[1088,224,2],[1072,224,2],[1056,224,2],[1040,224,2],[1024,224,2],[1008,224,2],[992,224,2],[1168,208,2],[1168,224,2],[1184,224,2],[1184,208,2],[1184,272,2],[1200,208,2],[1216,208,2],[1232,208,2],[1248,208,2],[1248,224,2],[1232,224,2],[1216,224,2],[1200,224,2],[1264,208,2],[1280,208,2],[1296,208,2],[1264,144,1],[1296,144,1],[1280,144,3],[1264,224,2],[1280,224,2],[1296,224,2],[1360,272,2],[1312,208,2],[1328,208,2],[1344,208,2],[1360,208,2],[1376,208,2],[1392,208,2],[1392,224,2],[1376,224,2],[1360,224,2],[1344,224,2],[1328,224,2],[1312,224,2],[1312,80,1],[1328,80,1],[1344,80,1],[1360,80,1],[1376,80,1],[1392,80,1],[1408,80,1],[1424,80,1],[1456,208,2],[1456,224,2],[1472,208,2],[1472,224,2],[1456,304,2],[1488,208,2],[1488,224,2],[1488,80,1],[1504,80,1],[1520,80,1],[1536,80,3],[1536,144,1],[1504,208,2],[1520,208,2],[1536,208,2],[1536,224,2],[1520,224,2],[1504,224,2],[1552,208,2],[1568,208,2],[1584,208,2],[1600,208,2],[1616,208,2],[1632,208,2],[1632,224,2],[1616,224,2],[1600,224,2],[1584,224,2],[1568,224,2],[1552,224,2],[1632,144,1],[1648,208,2],[1664,208,2],[1680,208,2],[1696,208,2],[1712,208,2],[1728,208,2],[1728,224,2],[1712,224,2],[1696,224,2],[1680,224,2],[1664,224,2],[1648,224,2],[1728,144,3],[1776,144,3],[1776,80,3],[1824,144,3],[1744,208,2],[1760,208,2],[1776,208,2],[1792,208,2],[1808,208,2],[1824,208,2],[1824,224,2],[1808,224,2],[1792,224,2],[1776,224,2],[1760,224,2],[1744,224,2],[1648,272,2],[1840,208,2],[1856,208,2],[1872,208,2],[1888,208,2],[1904,208,2],[1920,208,2],[1920,224,2],[1904,224,2],[1872,224,2],[1888,224,2],[1856,224,2],[1840,224,2],[1920,144,1],[1936,208,2],[1952,208,2],[1952,224,2],[1936,224,2],[1968,80,1],[1984,80,1],[2000,80,1],[1968,208,2],[1984,208,2],[2000,208,2],[2000,224,2],[1984,224,2],[1968,224,2],[1856,304,2],[1920,304,2],[2016,208,2],[2032,208,2],[2048,208,2],[2064,208,2],[2064,224,2],[2048,224,2],[2032,224,2],[2016,224,2],[2080,80,1],[224,272,1],[2096,80,3],[2112,80,3],[2128,80,1],[2112,144,1],[2096,144,1],[2080,208,2],[2096,208,2],[2112,208,2],[2128,208,2],[2128,224,2],[2112,224,2],[2096,224,2],[2080,224,2],[2144,208,2],[2160,208,2],[2144,224,2],[2160,224,2],[2176,208,2],[2192,208,2],[2224,208,2],[2208,208,2],[2224,224,2],[2208,224,2],[2192,224,2],[2176,224,2],[2176,192,0],[2192,192,0],[2208,192,0],[2224,192,0],[2224,176,0],[2208,176,0],[2192,176,0],[2208,160,0],[2224,160,0],[2224,144,0],[2256,208,2],[2240,208,2],[2240,224,2],[2256,224,2],[2272,208,2],[2272,224,2],[2240,256,2],[2272,192,0],[2272,176,0],[2272,160,0],[2272,144,0],[2288,160,0],[2288,176,0],[2288,192,0],[2304,176,0],[2304,192,0],[2320,192,0],[2336,208,2],[2320,208,2],[2304,208,2],[2288,208,2],[2288,224,2],[2304,224,2],[2320,224,2],[2336,224,2],[2256,272,2],[2352,208,2],[2352,224,2],[2368,224,2],[2368,208,2],[2384,208,2],[2384,224,2],[2400,208,2],[2432,208,2],[2416,208,2],[2448,208,2],[2464,208,2],[2464,224,2],[2448,224,2],[2432,224,2],[2416,224,2],[2400,224,2],[2400,192,0],[2416,192,0],[2432,192,0],[2448,192,0],[2448,176,0],[2448,160,0],[2448,144,0],[2432,160,0],[2416,176,0],[2432,176,0],[2464,144,0],[2464,160,0],[2464,176,0],[2464,192,0],[2512,192,0],[2512,176,0],[2512,160,0],[2512,144,0],[2528,160,0],[2528,176,0],[2528,192,0],[2544,176,0],[2544,192,0],[2560,192,0],[2560,208,2],[2544,208,2],[2528,208,2],[2512,208,2],[2512,224,2],[2528,224,2],[2544,224,2],[2560,224,2],[2576,208,2],[2592,208,2],[2608,208,2],[2624,208,2],[2624,224,2],[2608,224,2],[2576,224,2],[2592,224,2],[2640,208,2],[2656,208,2],[2672,224,2],[2672,208,2],[2688,208,2],[2704,208,2],[2704,224,2],[2688,224,2],[2720,144,1],[2736,144,1],[2768,144,1],[2752,144,3],[2768,208,2],[2752,208,2],[2736,208,2],[2720,208,2],[2720,224,2],[2736,224,2],[2752,224,2],[2768,224,2],[2688,288,2],[2784,208,2],[2800,208,2],[2816,208,2],[2832,208,2],[2848,208,2],[2864,208,2],[2880,208,2],[2880,224,2],[2864,224,2],[2848,224,2],[2832,224,2],[2816,224,2],[2800,224,2],[2784,224,2],[2896,208,2],[2912,208,2],[2928,208,2],[2928,224,2],[2944,208,2],[2960,208,2],[2976,208,2],[2992,208,2],[3008,208,2],[3024,208,2],[3040,208,2],[2928,192,0],[2944,192,0],[2960,192,0],[2976,192,0],[2992,192,0],[3008,192,0],[3024,192,0],[3040,192,0],[2944,176,0],[2960,160,0],[2976,144,0],[2992,128,0],[3008,112,0],[3024,96,0],[3040,80,0],[3056,80,0],[3056,96,0],[3056,112,0],[3056,128,0],[3056,144,0],[3056,160,0],[3056,176,0],[3056,192,0],[3040,176,0],[3024,176,0],[3008,176,0],[2992,176,0],[2976,176,0],[2960,176,0],[2976,160,0],[2992,160,0],[3008,160,0],[3024,160,0],[3040,160,0],[3040,144,0],[3024,144,0],[3008,144,0],[2992,144,0],[3008,128,0],[3024,128,0],[3040,128,0],[3040,112,0],[3024,112,0],[3040,96,0],[3056,208,2],[3056,224,2],[3040,224,2],[3024,224,2],[3008,224,2],[2992,224,2],[2976,224,2],[2960,224,2],[2944,224,2],[3072,208,2],[3088,208,2],[3104,208,2],[3120,208,2],[3136,208,2],[3152,208,2],[3152,224,2],[3136,224,2],[3120,224,2],[3104,224,2],[3088,224,2],[3072,224,2],[3168,208,2],[3184,208,2],[3184,224,2],[3168,224,2],[3200,192,0],[3200,208,2],[3200,224,2],[3216,208,2],[3232,208,2],[3248,208,2],[3264,208,2],[3280,208,2],[3296,208,2],[3312,208,2],[3328,208,2],[3344,208,2],[3344,224,2],[3248,224,2],[3232,224,2],[3216,224,2],[3360,208,2],[3392,208,2],[3376,208,2],[3392,224,2],[3376,224,2],[3360,224,2],[3408,208,2],[3408,224,2],[3424,208,2],[3424,224,2],[3440,224,2],[3440,208,2],[3456,224,2],[3456,208,2],[3472,224,2],[3472,208,2],[3488,224,2],[3488,208,2],[480,176,4],[496,176,5],[480,192,6],[496,192,7],[656,192,7],[656,176,7],[656,160,7],[640,160,6],[640,176,6],[640,192,6],[640,144,4],[656,144,5],[784,160,5],[768,160,4],[768,176,6],[768,192,6],[784,192,7],[784,176,7],[960,192,7],[960,176,7],[944,176,6],[944,192,6],[960,160,5],[944,160,4],[960,224,2],[944,224,2],[768,224,2],[784,224,2],[640,224,2],[656,224,2],[496,224,2],[480,224,2],[2656,192,7],[2640,192,6],[2656,176,5],[2640,176,4],[2640,224,2],[2656,224,2],[2912,192,7],[2896,192,6],[2912,176,5],[2896,176,4],[2912,224,2],[2896,224,2],[48,176,8],[224,192,10],[288,176,9],[400,192,11],[896,240,9],[720,192,12],[832,176,8],[1008,192,10],[1072,176,9],[1184,192,11],[1328,320,11],[1488,192,12],[1600,176,8],[1648,144,3],[1776,192,10],[1840,176,9],[1952,192,11],[2368,176,9],[2608,176,9],[2720,192,11],[3136,176,8],[3376,176,9],[160,32,14],[336,16,14],[496,48,15],[640,32,13],[944,48,14],[1120,32,14],[1264,48,15],[1408,32,13],[1712,48,14],[1888,32,14],[2032,48,15],[2176,32,13],[2480,48,14],[2656,32,14],[2800,48,15],[2960,32,13],[3248,48,14],[3296,160,16],[3200,96,17],[3264,224,2],[3280,224,2],[3296,224,2],[3312,224,2],[3328,224,2]]")
}


